server:
  port: 8090 # Đặt lại cổng API Gateway thành 8090

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka/}
    register-with-eureka: true # Gateway cũng đăng ký với Eureka (tùy chọn)
    fetch-registry: true
  instance:
    preferIpAddress: true
    instanceId: ${spring.application.name}:${spring.application.instance_id:${random.value}}

spring:
  application:
    name: api-gateway # Tên ứng dụng gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true # Bật tự động tìm kiếm service qua Eureka
          lower-case-service-id: true # Chuyển tên service thành chữ thường khi tạo route tự động (nếu dùng)
      globalcors: # Kích hoạt lại phần này
        cors-configurations:
          '[/**]': # Áp dụng cho tất cả các đường dẫn
            allowedOrigins: "*" # Cho phép tất cả origins
            allowedMethods:
              - "GET"
              - "POST"
              - "PUT"
              - "DELETE"
              - "OPTIONS"
              - "PATCH"
            allowedHeaders: # Thêm các header cần thiết
              - "Authorization"
              - "Content-Type"
              - "Accept"
              - "X-Requested-With"
              - "Origin"
              - "Access-Control-Request-Method"
              - "Access-Control-Request-Headers"
            allowCredentials: false # Đặt thành false khi dùng allowedOrigins: "*"
            maxAge: 3600
      # ... other gateway configurations like routes ...
      routes:
        # Route cho Auth Service
        - id: auth-service-route
          uri: lb://auth-service # Sử dụng load balancing qua Eureka
          predicates:
            - Path=/api/auth/** # Match các đường dẫn bắt đầu bằng /api/auth/
          filters:
            - RewritePath=/api/auth/(?<segment>.*), /api/auth/$\{segment}

        # Route cho User Service (Ví dụ đường dẫn, cần điều chỉnh nếu User Service có API khác)
        - id: user-service-route
          uri: lb://user-service
          predicates:
            # Giả sử API quản lý user nằm dưới /api/admin/users/
            - Path=/api/admin/users/**
          filters:
            - RewritePath=/api/admin/users/(?<segment>.*), /$\{segment}

        # Route cho Quiz Service
        - id: quiz-service-route
          uri: lb://quiz-service
          predicates:
            # Giả sử API quản lý quiz nằm dưới /api/admin/quizzes/
            - Path=/api/admin/quizzes/**
          filters:
            - RewritePath=/api/admin/quizzes/(?<segment>.*), /$\{segment}

        # Route cho Question Service
        - id: question-service-route
          uri: lb://question-service
          predicates:
            # Giả sử API quản lý question nằm dưới /api/admin/questions/
            - Path=/api/admin/questions/**
          filters:
            - RewritePath=/api/admin/questions/(?<segment>.*), /$\{segment}

        # Route cho Categories API
        - id: categories-api-route
          uri: lb://question-service
          predicates:
            - Path=/api/categories/**
          filters:
            - RewritePath=/api/categories/(?<segment>.*), /api/categories/$\{segment}

        # Route cho Questions API
        - id: questions-api-route
          uri: lb://question-service
          predicates:
            - Path=/api/questions/**

        # Route cho Quizzes API
        - id: quizzes-api-route
          uri: lb://quiz-service
          predicates:
            - Path=/api/quizzes/**

        # --- Route cho Settings Service (MỚI) ---
        - id: settings-service-route
          # uri: lb://SETTINGS-SERVICE # Giữ lại URL trực tiếp để test, hoặc đổi lại lb nếu muốn test discovery
          uri: http://localhost:8086
          predicates:
            # Match các đường dẫn cho settings admin
            - Path=/api/admin/settings/**
          filters:
            # Viết lại đường dẫn: /api/admin/settings/(segment) -> /(segment)
            # Vì Controller giờ lắng nghe trên đường dẫn đầy đủ (/api/settings/...)
            - RewritePath=/api/admin/settings/(?<segment>.*), /$\{segment}

        # Route cho Admin Dashboard Service
        - id: admin-dashboard-service-route
          uri: lb://admin-dashboard-service # Sử dụng tên service ID chữ thường, khớp với spring.application.name
          predicates:
            - Path=/api/admin/** # Match các đường dẫn bắt đầu bằng /api/admin/
          filters:
            # Bỏ RewritePath nếu admin-dashboard-service đã xử lý /api/admin trong @RequestMapping của Controller
            # Nếu DashboardController của admin-dashboard-service có @RequestMapping("/api/admin")
            # thì không cần RewritePath này, hoặc phải đảm bảo nó rewrite đúng.
            # Ví dụ: nếu controller không có /api/admin, thì: 
            # - RewritePath=/api/admin/(?<segment>.*), /$\{segment}
            # Nếu controller có /api/admin rồi, thì không cần rewrite, hoặc:
            # - RewritePath=/api/admin/(?<segment>.*), /api/admin/$\{segment} # (giữ nguyên, thường không cần thiết)
            - name: AuthenticationFilter # Áp dụng AuthenticationFilter nếu cần bảo vệ các endpoint admin


# Cấu hình logging (Tùy chọn)
logging:
  level:
    org.springframework.cloud.gateway: TRACE # Log chi tiết gateway để debug routing
    reactor.netty.http.client: DEBUG # Log HTTP client của gateway
    root: INFO

# JWT Configuration
jwt:
  secret: quizgameSecretKey1234567890123456789012345678901234567890